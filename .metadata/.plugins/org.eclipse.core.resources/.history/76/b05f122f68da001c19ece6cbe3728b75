package edu.kh.community.board.model.vo;



public class Pagination {
	//페이징 처리 : 1쪽 2쪽 한 페이지를 나눈다는 의미 
	//페이지네이션 : 페이징 처리에 필요한 모든 값을 저장하고 있는 객체
	
	private int currentPage; //현재 페이지 번호
	private int listCount;  //모든 게시글 수
	
	private int limit = 10; //한 페이지에 보여질 게시글의 수
	private int pageSize =10;  // 목록 하단에 페이즈번호의 노출 개수.
	
	private int maxPage;     //제일 큰 페이지 번호 == 50페이지.
	private int startPage;   //목록 하단에 노출된 페이지의 시작번호
	private int endPage;     //목록 하단에 노출된 페이지의 끝번호
	
	private int prevPage;    //목록 하단된 노출된 번호의 이전 목록 끝 번호
	private int nextPage; 	 //목록 하단된 노출된 번호의 시작 목록 시작 번호
	
	public Pagination(int currentPage,int listCount) {
		this.currentPage = currentPage;
		this.listCount = listCount;
	}

	public int getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}

	public int getListCount() {
		return listCount;
	}

	public void setListCount(int listCount) {
		this.listCount = listCount;
	}

	public int getLimit() {
		return limit;
	}

	public void setLimit(int limit) {
		this.limit = limit;
	}

	public int getPageSize() {
		return pageSize;
	}

	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	public int getMaxPage() {
		return maxPage;
	}

	public void setMaxPage(int maxPage) {
		this.maxPage = maxPage;
	}

	public int getStartPage() {
		return startPage;
	}

	public void setStartPage(int startPage) {
		this.startPage = startPage;
	}

	public int getEndPage() {
		return endPage;
	}

	public void setEndPage(int endPage) {
		this.endPage = endPage;
	}

	public int getPrevPage() {
		return prevPage;
	}

	public void setPrevPage(int prevPage) {
		this.prevPage = prevPage;
	}
	public int getNextPage() {
		return nextPage;
	}
	public void setNextPage(int nextPage) {
		this.nextPage = nextPage;
	}

	@Override
	public String toString() {
		return "Pagination [currentPage=" + currentPage + ", listCount=" + listCount + ", limit=" + limit
				+ ", pageSize=" + pageSize + ", maxPage=" + maxPage + ", startPage=" + startPage + ", endPage="
				+ endPage + ", prevPage=" + prevPage + ", nextPage=" + nextPage + "]";
	}
	
	
	//페이징 처리에 필요한 값을 계산하는 메서드
	private void calculatePagination() {
		//maxPage 계산 : 최대 페이지 수 == 마지막 페이지 번호
		// 남은 페이지 수가 있다면 페이지의 올림 처리 필요
		maxPage = (int)(Math.ceil((double)listCount/limit));
		
		//목록 하단에 노출된 페이지의 시작번호
		//현재 페이지 1~10인 경우  : 1 
		//현재 페이지 11~21인 경우 : 11 
		//현재 페이지 21~30인 경우 : 21
		startPage = (currentPage-1)/pageSize*pageSize+1; 
		
		//목록 하단에 노출된 페이지의 끝 번호
		//현재 페이지 1~10인 경우  : 10 
		//현재 페이지 11~20인 경우 : 20 
		//현재 페이지 21~30인 경우 : 30
		
		endPage = startPage+pageSize-1;
		//만약에 endPage가 maxPage를 초과하는 경우
		if(endPage>maxPage){
			endPage=maxPage;
		}
		
//		prevPage(<); : 목록하단에 노출된 번호의 이전 목록 끝 번호
//		nextPage(>); : 목록하단에 노출된 번호의 이전 목록 시작 번호
		
		//현재 페이지 1~10인 경우 
		//< :1페이지
		//> :11페이지
		
		//현재 페이지 11~20인 경우  
		//< :10페이지
		//> :21페이지
		
		//현재 페이지 41~50인 경우  
		//< :10페이지
		//> :21페이지
		
		
		
	}
	
}
