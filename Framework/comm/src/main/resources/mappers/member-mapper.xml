<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">


	<!-- Mapper 파일 생성시 반드시 해야 할 것 -->
	<!-- 1 . <cache-ref namespace=""/> 태그 꼭 지우기 -->
	<!-- 2 . Mapper 태그에 nameSpace 속성 추가. nameSpace : 해당 파일을 호출하기 쉽게하기 위해 지정하는 
		이름(DAO에서 사용) -->

	<!-- 수행하고자 하는 sql문에 따라 태그가 구문된다 ( 사용 가능한 속성도 다르다. <select id=""></select> 
		<insert id=""></insert> <update id=""></update> <delete id=""></delete> -->


	<!-- resultMap 태그 -select 조회 결과의 컬럼과 조회 결과를 옮겨담을 VO의 필드명이 일치하지 않을 때. 이를 
		매핑 시켜 조회 결과가 필드에 setting되게 하는 역할이다. [resultMap 속성] 1) type : 조회 결과를 담을 VO 
		타입 또는 별칭 2) id : 만들어진 ResultMap 태그를 식별할 이름 [resultMap 내부 작성 태그] <id> : pk 
		역할의 컬럼 - 필드 연결 <result> : pk를 제외한 나머지 컬럼 = 필드 연결 -->
	<resultMap type="member" id="member_rm">
		<id property="memberNo" column="MEMBER_NO" />

		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberPw" column="MEMBER_PW" />
		<result property="memberNickname" column="MEMBER_NICK" />
		<result property="memberTel" column="MEMBER_TEL" />
		<result property="memberAddress" column="MEMBER_ADDR" />
		<result property="profileImage" column="PROFILE_IMG" />
		<result property="enrollDate" column="ENROLL_DT" />
		<result property="secessionFlag" column="SECESSION_FL" />
	</resultMap>





	<!-- Select 태그 속성 1) resultType : 조회 결과가 1행 1열인 경우에만 작성한다. 조회된 데이터의 JAVA 
		자료형을 Mybatis 별칭 형태로 작성 [ myBatis 별칭 ] java : Mybatis =============== int 
		: _int Integer : int String : string (java.lang.String)다 적어나 소문자로 적어줘야한다. 
		2) -->


	<!-- 조회되는 행의 개수 : 1행 / 조회되는 데이터의 타입 : int -->
	<select id="test1" resultType="_int">SELECT COUNT(*) FROM MEMBER
	</select>

	<!-- [** 중요 **] Mybatis #{} , ${} 두개의 차이점 #{변수명} : SQL에 값이 포함 될 떄 양쪽에 '' 
		추가 됨 (pstmt) -> iteral로 사용 (값 자체로 사용) (조건식 값 , 출력하고자 하는 컬럼 값) ${변수명} : SQL에 
		값이 포함 될 때 양쪽에 ''가 추가되지 않음(stmt) -> SQL 구문 조합 시 사용 ( Condition ) -->
	<!-- 조회되는 행의 개수 : 1행 / 파라미터 타입 : String /조회되는 데이터의 타입 : String -->
	<select id="test2" parameterType="string" resultType="string">
		SELECT
		MEMBER_NICK FROM MEMBER WHERE MEMBER_EMAIL = #{memberEmail} AND
		SECESSION_FL='N'
	</select>

	<!-- 조회되는 행의 개수 : 1행 파라미터 타입 : edu.kh.comm.member.model.vo.Member 조회되는 타입 
		: String ->string(myBatis별칭) 파라미터로 VO가 전달된 경우 1) 패키지명 + 클래스명을 모두 작성 해야 한다. 
		2) mapper에서 VO에 저장된 값을 얻어와 사용할 경우 #{필드명} , 단 VO에 '반드시' Getter가 있어야 한다. -->
	<select id="test3" parameterType="member" resultType="string">
		SELECT
		MEMBER_TEL
		FROM MEMBER_S
		WHERE MEMBER_EMAIL = #{memberEmail}
		AND
		MEMBER_PW= #{memberPw}
		AND SECESSION_FL = 'N'
	</select>

	<!-- typeAlies 를 통해 member로 퉁칠수 있음 모든 경로가 아니라 -->
	<!-- 조회되는 행의 개수 : 1행 파라미터 타입: member 조회되는 타입: member resultType ="vo" 안된다 
		반환 속성에 VO를 작성하는 경우 VO의 필드명과 조회되는 컬럼명이 일치하면 자동으로 VO객체에 값이 세팅된다. -> 하지만 Java와 
		DB의 표기법 차이로 인해 위의 특징이 적용되는 경우가 많지 않다. 그래서 Mybatis에서 제공해주는 태그가 있다. 필드명 , 컬럼명이 
		달라도 이를 연결해주는 resultMap 태그를 제공 resultMap = "member_rm" - > 조회 결과를 member_rm을 
		이용하여 비교한 후 VO에 세팅한다. -->
	<select id="loginMember" parameterType="member"
		resultMap="member_rm">
		SELECT MEMBER_NO,MEMBER_EMAIL,MEMBER_NICK ,MEMBER_TEL,
		MEMBER_ADDR,
		PROFILE_IMG,
		TO_CHAR( ENROLL_DT, 'YYYY-MM-DD HH24:MI:SS') AS
		ENROLL_DT,MEMBER_PW
		FROM MEMBER_S
		WHERE MEMBER_EMAIL = #{memberEmail}
		AND SECESSION_FL = 'N'
	</select>
	<!--^^^ 이메일이 일치하는 회원 가져옴 ^^^ -->

	<select id="emailDupCheck" parameterType="string"
		resultType='_int'>
		SELECT COUNT(*) FROM MEMBER_S
		WHERE
		MEMBER_EMAIL=#{memberEmail}
		AND SECESSION_FL='N'
	</select>

	<!-- 닉네임 조회 -->
	<select id="nicknameDupCheck" parameterType="string"
		resultType='_int'>
		SELECT COUNT(*) FROM MEMBER_S
		WHERE
		MEMBER_NICK=#{memberNickname}
		AND SECESSION_FL='N'
	</select>


	<!-- 회원 가입 -->
	<insert id="signUp">
		INSERT INTO MEMBER_S VALUES(
		SEQ_MEMBER_NO_S.NEXTVAL,
		#{memberEmail},
		#{memberPw},
		#{memberNickname},
		#{memberTel},
		#{memberAddress},
		DEFAULT, DEFAULT, DEFAULT
		)
	</insert>
</mapper>
